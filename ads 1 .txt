#include <iostream>
#include <queue>
using namespace std;

struct Node {
    string name;
    string mobile_no;
    Node* left;
    Node* right;
};

class Dictionary {
public:
    Node* root;

    Dictionary() {
        root = nullptr;
    }

    Node* create(string name, string mobile_no) {
        Node* nn = new Node;
        nn->name = name;
        nn->mobile_no = mobile_no;
        nn->left = nn->right = nullptr;
        return nn;
    }

    Node* insert(Node* root, string name, string mobile_no) {
        if (!root)
            return create(name, mobile_no);

        if (name < root->name)
            root->left = insert(root->left, name, mobile_no);
        else if (name > root->name)
            root->right = insert(root->right, name, mobile_no);
        else
            cout << "Duplicate entry for " << name << " not allowed.\n";
        return root;
    }

    Node* search(Node* root, string name) {
        if (!root || root->name == name)
            return root;
        if (name < root->name)
            return search(root->left, name);
        return search(root->right, name);
    }

    Node* minnode(Node* node) {
        while (node && node->left)
            node = node->left;
        return node;
    }

    Node* deletenode(Node* root, string name) {
        if (!root)
            return root;
        if (name < root->name)
            root->left = deletenode(root->left, name);
        else if (name > root->name)
            root->right = deletenode(root->right, name);
        else {
            if (!root->left) {
                Node* temp = root->right;
                delete root;
                return temp;
            } else if (!root->right) {
                Node* temp = root->left;
                delete root;
                return temp;
            }
            Node* temp = minnode(root->right);
            root->name = temp->name;
            root->mobile_no = temp->mobile_no;
            root->right = deletenode(root->right, temp->name);
        }
        return root;
    }

    void inorder(Node* root) {
        if (root) {
            inorder(root->left);
            cout << root->name << " - " << root->mobile_no << endl;
            inorder(root->right);
        }
    }

    void mirror(Node* root) {
        if (root) {
            mirror(root->left);
            mirror(root->right);
            swap(root->left, root->right);
        }
    }

    Node* copy(Node* root) {
        if (!root)
            return nullptr;
        Node* newNode = new Node;
        newNode->name = root->name;
        newNode->mobile_no = root->mobile_no;
        newNode->left = copy(root->left);
        newNode->right = copy(root->right);
        return newNode;
    }

    void levelOrder(Node* root) {
        if (!root) return;
        queue<Node*> q;
        q.push(root);
        while (!q.empty()) {
            Node* temp = q.front();
            q.pop();
            cout << temp->name << " - " << temp->mobile_no << endl;
            if (temp->left) q.push(temp->left);
            if (temp->right) q.push(temp->right);
        }
    }
};

int main() {
    Dictionary d;
    d.root = d.insert(d.root, "Anish", "9388373632");
    d.root = d.insert(d.root, "Prathamesh", "9876543210");
    d.root = d.insert(d.root, "karan", "8372834287");
    d.root = d.insert(d.root, "Piyush", "7538482349");
    d.root = d.insert(d.root, "Nikhil", "9034562178");

    cout << " Dictionary (Inorder Traversal):" << endl;
    d.inorder(d.root);

    cout << "\n Searching for 'Ashish': ";
    Node* found = d.search(d.root, "Ashish");
    if (found)
        cout << "Found: " << found->name << " - " << found->mobile_no << endl;
    else
        cout << "Contact not found." << endl;

    cout << "\n Deleting 'karan'..." << endl;
    d.root = d.deletenode(d.root, "karan");
    d.inorder(d.root);

    cout << "\n Mirror Image of Dictionary:" << endl;
    d.mirror(d.root);
    d.inorder(d.root);

    cout << "\n Copying Dictionary..." << endl;
    Dictionary d_copy;
    d_copy.root = d.copy(d.root);
    cout << "Copied Dictionary (Inorder):" << endl;
    d_copy.inorder(d_copy.root);

    cout << "\n Dictionary Level-wise Display:" << endl;
    d.levelOrder(d.root);

    return 0;
}
