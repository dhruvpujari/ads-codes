#include <iostream>
using namespace std;

class Node {
public:
    int player_id;
    int score;
    Node* left;
    Node* right;

    Node(int id, int sc) {
        player_id = id;
        score = sc;
        left = NULL;
        right = NULL;
    }
};

class AVLTree {
public:
    Node* root = NULL;

    int height(Node* root) {
        if (root == NULL) {
            return 0;
        } else {
            int x = height(root->left);
            int y = height(root->right);
            if (x > y)
                return x + 1;
            else
                return y + 1;
        }
    }

    int getBalance(Node* node) {
        if (node == NULL)
            return 0;
        int lh = height(node->left);
        int rh = height(node->right);
        return lh - rh;
    }

    Node* rightRotate(Node* y) {
        Node* x = y->left;
        Node* T2 = x->right;

        x->right = y;
        y->left = T2;

        return x;
    }

    Node* leftRotate(Node* x) {
        Node* y = x->right;
        Node* T2 = y->left;

        y->left = x;
        x->right = T2;

        return y;
    }

    Node* insert(Node* node, int id, int score) {
        if (node == NULL)
            return new Node(id, score);

        if (score < node->score)
            node->left = insert(node->left, id, score);
        else
            node->right = insert(node->right, id, score);

        int balance = getBalance(node);

        // Rotations
        if (balance > 1 && score < node->left->score)
            return rightRotate(node);

        if (balance < -1 && score > node->right->score)
            return leftRotate(node);

        if (balance > 1 && score > node->left->score) {
            node->left = leftRotate(node->left);
            node = rightRotate(node);
        }

        if (balance < -1 && score < node->right->score) {
            node->right = rightRotate(node->right);
            node = leftRotate(node);
        }

        return node;
    }

    Node* minValueNode(Node* node) {
        Node* current = node;
        while (current->left != NULL)
            current = current->left;
        return current;
    }

    Node* deleteNode(Node* root, int score) {
        if (root == NULL)
            return root;

        if (score < root->score)
            root->left = deleteNode(root->left, score);
        else if (score > root->score)
            root->right = deleteNode(root->right, score);
        else {
            if (root->left == NULL && root->right == NULL) {
                delete root;
                return NULL;
            } else if (root->left == NULL) {
                Node* temp = root->right;
                delete root;
                return temp;
            } else if (root->right == NULL) {
                Node* temp = root->left;
                delete root;
                return temp;
            } else {
                Node* temp = minValueNode(root->right);
                root->score = temp->score;
                root->player_id = temp->player_id;
                root->right = deleteNode(root->right, temp->score);
            }
        }

        int balance = getBalance(root);

        if (balance > 1 && getBalance(root->left) >= 0)
            return rightRotate(root);

        if (balance > 1 && getBalance(root->left) < 0) {
            root->left = leftRotate(root->left);
            return rightRotate(root);
        }

        if (balance < -1 && getBalance(root->right) <= 0)
            return leftRotate(root);

        if (balance < -1 && getBalance(root->right) > 0) {
            root->right = rightRotate(root->right);
            return leftRotate(root);
        }

        return root;
    }

    void displayDescending(Node* node) {
        if (node != NULL) {
            displayDescending(node->right);
            cout << "Player ID: " << node->player_id << ", Score: " << node->score << endl;
            displayDescending(node->left);
        }
    }

    // Wrapper functions
    void registerPlayer(int id, int score) {
        root = insert(root, id, score);
    }

    void removePlayer(int score) {
        root = deleteNode(root, score);
    }

    void displayLeaderboard() {
        cout << "\nLeaderboard (High to Low Scores):\n";
        displayDescending(root);
    }
};

int main() {
    AVLTree game;

    // Player Registration
    game.registerPlayer(101, 50);
    game.registerPlayer(102, 80);
    game.registerPlayer(103, 60);
    game.registerPlayer(104, 90);
    game.registerPlayer(105, 70);

    game.displayLeaderboard();

    // Remove Player
    cout << "\nRemoving player with score 80...\n";
    game.removePlayer(80);

    game.displayLeaderboard();

    return 0;
}